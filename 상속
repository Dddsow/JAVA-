//상속의 정의와 장점
//상속이란 , 기존의 클래스를 재사용하여 새로운 클래스를 작성하는 것
//상속을 구현하는 방법 -> class [상속받을 클래스(자손클래스)] extends [상속해줄 클래스(조상클래스)] 이런 형식으로 구현하면된다.
//조상클래스: 상속을 해주는 클래스 , 자손클래스: 상속을 받는 클래스
class Parent {
    int age;
}
class Child extends Parent {  } //int age 라는 인스턴스변수가 Child밴다이어그램 안에 포함되게된다.

class Parent {
    int age;
}
class Child extends Parent {  
      void  play(){
          System.out.println("놀자~");
      }
}     //이렇게 되면 Parent는 없고 Child에만 play메소드가 들어있다.
//이처럼 조상클래스가 변경되면 자손클래스에게 영향을 주지만 자손클래스가 변경되면 조상에겐 영향을 주지 않는다. 밴다이어그램으로 생각해보면 쉽다. EASY
//** 생성자와 초기화 블럭은 상속되지 않는다. 멤버만 상속된다. / 자손클래스의 멤버 개수는 조상 클래스보다 항상 같거나 많다. 왜냐면 밴다이어그램안에 포함되있기 때문이다. **
//이런게 뭐가 유용한데 라고 물을 수 도 있겠다. 하지만 자손클래스 Child1 Child2가 조상 Parent 클래스를 같이 공유하고 있다면 둘에게 변수나 메소드를 추가할 때 조상에다가만 추가해주면 편하다.
// 상속의 가장 큰 목표는 프로그램을 구성하는 클래스들을 면밀히 설계 분석하여, 클래스간의 상속관계를 적절히 맺어 주는 것이 객체지향 프로그래밍에서 가장 중요한 부분이다.

class Tv{
    boolean power; //전원 상태를 나타내기 위한 변수 boolean형 
    int channel; //channel을 나타내기 위한 변수
    
    void power()        { power = !power; } //power의 상태전환 두 가지 경우이기 때문에 !을이용해 다른 상태로 바꿔준다.
    void channelUp()    { ++channel; } //채널업
    void channelDown()  { --channel; } //채널다운
}

class CaptionTv extends Tv{
    boolean caption; //boolean 형 변수 초기화를 했으면 boolean형 기본값은 false를 갖게 된다.
    void displayCaption(String text){
          if(caption){  //caption이 true 이면 text를 출력 
              System.out.println(text);
          }
    }
}

class CaptionTvTest {
      public static void main(String args []){
          CaptionTv ctv = new CaptionTv(); //CaptionTv의 객체 ctv 생성
          ctv.channel = 10; //ctv의 참조변수 channel의 값 10
          ctv.channelUp(); //채널업 ctv.channel의 값 11
          System.out.println(ctv.channel); //채널 출력 값 11
          ctv.displayCaption("Hello,World"); // Hello World를 출력한다 값은 출력되지 않는다. 왜냐하면 caption을 초기화해서 false값을 가지고 있기 때문에
          ctv.caption = true; //true로 전환
          ctv.displayCaption("Hello,World"); //이제 Hello World가 출력될 것이다.
     }
}
          
//=============================================================================================
//상속이외에도 클래스를 재사용하는 또 다른 방법이 있는데, 그것은 클래스에 '포함'관계를 맺어 주는 것이다.
//->그렇다면 포함관계를 맺어주는 것은 어떻게 하냐? 그것은 한 클래스의 멤버변수로 다른 클래스 타입의 참조변수를 선언하는 것을 뜻한다.
//예시
class Circle{
    int x; //원점의 x
    int y; //원점의 y
    int r; //반지름
}

class Point{
    int x; //x좌표
    int y; //y좌표
}

//여기서 Point클래스를 재사용해서 Circle클래스를 작성한다면 다음과 같이 할 수 있다. 아래를 보자.

class Circle{
    Point c = new Point(); //다른 클래스를 멤버변수로 선언하여 포함시키는 것은 좋은 생각이다. 이걸 씀으로써 x,y좌표를 Circle에 넣을 수 있게 됐다.
    int r; //반지름
}

class Point{
    int x; //x좌표
    int y; //y좌표
}          

//1-3 클래스의 관계 설정하기
//상속관계로 해줄 것인지 ,포함관계로 해줄 것인지 설정하기
//이럴 때는
// ~은 ~이다 (is-a)[상속관계] ~은 ~을 가지고 있다 (has-a)[포함관계]를 넣어서 문장을 만들어 자연스러운걸로하자.
// 1.원은 점이다 2.원은 점을 가지고 있다 후자가 누가봐도 자연스럽다 아님말고 ㅋ 그렇다면 뭘로해야겠니? 당연히 포함관계로 가즈아 !
//상속관계 ~은 ~이다.( is - a )
//포함관계 ~은 ~을 가지고 있다.( has - a )
//"프로그램의 모든 클래스를 분석하여 가능한 많은 관계를 맺도록 노력해서 코드의 재사용성을 높여야 한다."

class DrawShape {
    public static void main(String args []){
        Point [] p = {  new Point(100,100) ,
                        new Point(140,50)  ,
                        new Point(200,100)
                     };    //배열 생성 new Pint(100,100)은 Point p = new Point(100,100)이라고 생각하면된다. 다만 객체는없다.                     
       Triangle t =  new Triangle(p); //Triangle의 객체 t생성
       Circle c = new Circle(new Point(150,150),50); //Circle의 객체 c 생성 // Point p = new Point(150,150) -> new Circle(p,50); -> Circle c = new Circle(p,50)임 
       
       t.draw();
       c.draw();
    }
}

class Shape{
    String color = " black ";
    void draw() {
        System.out.printf("[color = %s ] %n ", color);
    }
}

class Point {
      int x;
      int y;
      
      Point(int x,int y){
          this.x = x;
          this.y = y;
      }
      Point() {
          this(0,0);
      }
      
      String getXY(){
          return "("+x+","+y+")";
     }
}

class Circle extends Shape{
    Point center;
    int r;
    
    Circle(){
        this(new Point(0,0),100);
    }
    
    Circle(Point center,int r){
          this.center = center;
          this.r = r;
    }
    
    void draw() {
        System.out.printf("[center=(%d , %d) , r = %d , color = %s] %n",center.x,center.y,r,color);
    }
}

class Triangle extends Shape{
    Point [] p = new Point[3];
    
    Triangle(Point [] p){
        this.p = p;
    }
    
    void draw(){
          System.out.printf("[p1=%s,p2=%s,p3=%s,color=%s]%n",p[0].getXY(),p[1].getXY(),p[2].getXY(),color);
    }
}
    
//====================================================================================예제2

class DeckTest{
        public static void main(String args[]){
                Deck d = new Deck(); //덱생성
                Card c = d.pick(0); // pick(int index 호출) 섞기 전 제일 처음의 카드를 뽑음 섞기전 첫 번째 카드는 new Card(4,1) -> SPADE 1 그러면 이게 Card c = new Card(k,n+1)이 된다. 처음이니까 4,1
                System.out.println(c); //System.out.println(c.toString()); 과 같다 //SPADE , 1 
                
                d.shuffle(); //카드를 섞는다
                c = d.pick(0); //섞은 후에 제일 위에 카드를 뽑는다.
                System.out.println(c); //System.out.println(c.toString()); 과 같다 // 참조변수의 출력이나 덧셈연산자를 이용한 참조변수와 문자열의 결합에는 toString()이 자동적으로 호출되어 참조변수를 문자열로 대치한 후 처리한다.
           }
}
    
class Deck {
        
        final int CARD_NUM = 52;
        Card cardArr[] = new Card[CARD_NUM];
        
        Deck() {
            int i = 0;
            
            for(int k = Card.KIND_MAX; k > 0 ; k--) //KINDMAX = 4 
                for(int n=0; n<Card.NUM_MAX ; n++) //NUMMAX= 13
                    cardArr[i++] = new Card(k,n+1); //cardArr에 Card의 객체 new Card(k,n+1)을 넣음. 예를 들면, cardArr[0] = new Card(4,1)이다.
        }
        
        Card pick(int index){
                return cardArr[index]; // 카드 덱에 있는 1차원배열 0-51중에 index값에 따라 cardArr출력 카
        }
        Card pick() {
            int index = (int)(Math.random() *  CARD_NUM); //카드 하나를 무작위로 선택한다
            return pick(index);
        }
        void shuffle(){ //카드의 순서를 섞는다
           
            for(int i = 0; i < cardArr.length ; i++){
                int r = (int)(Math.random() * CARD_NUM);
                
                Card temp = cardArr[i];
                cardArr[i] = cardArr[r];
                cardArr[r] = temp;
            }
        }
} //Deck 클래스의 끝

class Card {
    static final int KIND_MAX = 4; //카드 무늬의 수
    static final int NUM_MAX = 13; //무늬별 카드 수
    
    static final int SPADE = 4;
    static final int DIAMOND = 3;
    static final int HEART = 2;
    static final int CLOVER = 1;
    int kind;
    int number;
    
    Card(){
        this(SPADE,1);
    }
    
    Card(int kind,int number){
         this.kind = kind;
         this.number = number;
    }
    
    public String toString(){
            String[] kinds = { "","CLOVER","HEART","DIAMOND","SPADE" };
            String numbers = "0123456789XJQK" ;
            
            return "kind : " + kinds[this.kind] + ",number : " + numbers.charAt(this.number);
    }//toString()의 끝
} //Card클래스의 끝
            
            
    
   

            
            
            
            
            
            
            
            
            
            
            
            
            
    
    
          
          
          
          




















