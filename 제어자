//제어자란?
//제어자는 접근 제어자와 그 외 제어자로 나눌 수 있다.
//접근제어자 : public , protected , default , private
//그 외:static,final,abstact,native,transient,synchronized,volatile,strictfp

//static - 클래스의 , 공통적인
//클래스변수는 인스턴스의 관계없이 같은 값을 갖는다.
//static 변수가 사용될 수 있는 곳 - 멤버변수 , 메서드 , 초기화 블럭

class StaticTest{       ->주로 클래스변수를 초기화하는데 주로 사용된다.
  static int width = 200;
  static int height = 100;
  
  static{
      //static변수의 복잡한 초기화 수행
  }
  
  static int max(int a,int b){
      return a>b ? a:b
  }

}

//final - 변경될 수 없는 , 마지막의
//final이 사용될 수 있는 곳 - 클래스,메서드,멤버변수,지역변수

//파이널을 클래스 메서드 멤버변수 지역변수앞에다가 붙이면 전부 변경될 수 없는 상태가 된다. 전에 했으니 알아서 이해하자.

//생성자를 이용한final멤버변수의 초기화

//final이 붙은 변수는 상수이므로 일반적으로 선언과 초기화를 동시에 하지만 " 인스턴스변수의 경우 생성자에서 초기화 되도록 할 수 있다. "

class Card{
    final int NUMBER:
    final String KIND;
    static int width = 100;
    static int height = 250;
    
    Card(String kind,int num){
        KIND = kind;      //매개변수로 넘겨받은 값으로 KIND와 NUMBER을 초기화한다.
        NUMBER = num;
    }
    
    Card(){
        this("HEART",1);
    }
    public String toString() {
        return KIND + " "+ NUMBER ;
    }
}
class FinalCardTest{
    publi static void main(String args[]){
        Card c = new Card("HEART",1);
        c.NUMBER = 5;
        System.out.println(c.KIND);
        System.out.println(c.NUMBER);
        System.out.println(c);  //System.out.println(c.toString());이랑 같다.
   }
}

// abstract - 추상의 , 미완성의

//abstract가 사용될 수 있는곳 -> 클래스,메서드
//추상클래스는 미완성 설계도이다. 인스턴스를 생성할 수 없다.
abstract class AbstractTest{    //추상 클래스(추상 메서드를 포함한 클래스)
    abstract void move();       //추상 메서드(구현부가 없는 메서드)
}
//그럼 이 쓰레기는 왜쓰냐? -> 다른클래스가 이 클래스를 상속받아서 일부 원하는 부분을 오버라이딩해서 사용해도 된다는 장점이 있다.

//접근 제어자

//private default protected public
//public 접근 제한이 전혀없다.
//default 같은 패키지 내에서만 접근이 가능하다.
//protected 같은 패키지 내에서, 그리고 다른 패키지의 자손클래스에서 접근이 가능하다.
//private 같은 클래스 내에서만 접근이 가능하다.
//public protected default private 접근 범위가 넓은 순서부터 좁은 순서 그리고 default가 아무것도 안 붙이면 default 인것이다.
//클래스에서 public과 default 를 붙일 수 있고
//메서드와 멤버변수에는  public protected default private를 붙일 수 있다.
//지역변수는 x . 지역변수는 메서드 안에서 선언되는 변수이다.

//접근제어자를 이용한 캡슐화
//클래스의 내부에 선언된 데이터를 보호하기 위해서 접근 제어자를 사용한다.
//데이터 감추기라고 하며 객체지향개념의 캡슐화이다.

//예제를 한 번 들어보자

public class Time[
    private int hour;
    private int minute;
    private int second;
    
    public int getHour(){   return hour; }
    public void setHour(int hour){
          if(hour < 0|| hour> 23) return;
          this.hour=hour;
    }
    public int getMinute(){   return minute; }
    public void setMinute(int Minute){
          if(minute < 0|| minute> 59) return;
          this.minute=minute;
    }
    public int getSecond(){   return second; }
    public void setSecond(int second){
          if(hour < 0|| hour> 59) return;
          this.second=second;
    }    
    
//get으로 시작하는 메서드는 단순히 멤버변수의 값을 반환하는 일을 하고,
//set으로 시작하는 메서드는 매개변수에 지정된 값을 검사하여 조건에 맞는 값일 때만 멤버변수의 값을 변경하도록 작성되어 있다.
//만약 " 상속을 통해 확장될 것 같다고 예상되는 클래스라면 멤버에 접근 제한을 두되 자손클래스에서 접근이 가능한 private 대신 protected를 사용한다.

//멤버변수의 값을 읽는 메서드의 이름을 get멤버변수이름으로 하고  get으로 시작하는 메서드를 getter 겟터
//멤버변수의 값을 변경하는 메서드의 이름을 set멤버변수이름으로 한다. set으로 시작하는 메서드를 setter 셋터

public static TimeTest{
    public static void main(String args[]){
      Time t = new Time(12,35,30);
      System.out.println(t);
      t.hour = 13;
      t.setHour(t.getHour() + 1);
      System.out.println(t); // System.out.println(t.toString())과 같다.
   }
}

class Time{
    private int hour,minute,second;
    
    Time(int hour,int minute,int second){
      setHour(hour);
      setMinute(minute);
      setSecond(second);
    }
   
    public int getHour(){   return hour; }
    public void setHour(int hour){
          if(hour < 0|| hour> 23) return;
          this.hour=hour;
    }
    public int getMinute(){   return minute; }
    public void setMinute(int Minute){
          if(minute < 0|| minute> 59) return;
          this.minute=minute;
    }
    public int getSecond(){   return second; }
    public void setSecond(int second){
          if(hour < 0|| hour> 59) return;
          this.second=second;
    }   
    public String toString(){
        return hour + ":" +  minute + ":" + second;
   }
}

//Time클래스의 모든 멤버변수의 접근 제어자를 private으로 하고, 이 들을 다루기 위한 public메서드를 추가했다. 그래서 't.hour = 13;'과 같이 멤버변수로의 직접적인 접근은 허가되지 않는다.
//메서드를 통한 접근만이 허용될 뿐이다.

//[사용가능한 제어자]
//클래스:static,default,final,abstract
//메서드:모든 접근 제어자,final,abstract,static
//멤버변수:모든 접근 제어자,final,static
//지역변수:final

//제어자의 조합 
//1.메서드에 static과 abstract를 함께 사용할 수 없다.
//static메서드는 몸통이 있는 메서드에서만 사용할 수 있기 때문이다. abstract가 붙은 메서드는 내용(구현부)이없다.
//2.클래스에 abstract와 final을 동시에 사용할 수 없다.
//final은 클래스를 확장할 수 없다는 의미이고, abstract는 상속을 통해서 완성되어야 한다는 의미이다. 모순임 contradiction
//3.abstract메서드의 접근 제어자가 private일 수 없다.
//abstract메서드는 자손클래스에서 구현해주어야하는데, 접근제어자가 private라면 자손클래스에서 접근할 수 없기 때문이다.
//4.메서드에 private와 final을 같이 사용할 필요는 없다.
//접근제어자가 private인 메서드는 오버라이딩 될 수 없기 때문이다.이 둘 중 하나만 사용해도 의미가 충분하다.





























 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
