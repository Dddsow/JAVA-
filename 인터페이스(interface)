//인터페이스 일종의 추상클래스

//단 , 추상클래스보다 추상화 정도가 높아서 오직 추상메서드와 상수만을 멤버로 가질 수 있다.

//인터페이스의 작성
interface 인터페이스이름{
    public static final 타입 상수이름 = 값;
    public abstract 메서드이름(매개변수목록);
}
//작성하는 방법은 클래스와 같지만 다만 키워드로 "interface"를 사용한다는 것만 다르다. 접근제어자로 public 또는 default를 사용할 수 있다.

//모든 [멤버변수]는 public static final이어야 하며 이는 생략가능
//모든 [메서드]는 public abstract 이어야 하며 이를 생략가능

interface PlayingCard{
    public static final int SPADE = 4;
    final int DIAMOND = 3;
    static int HEART = 2;
    int CLOVER = 1;
    
    public abstract String getCardNumber();
    String getCardKind();
}

//인터페이스의 상속

//인터페이스는 인터페이스로부터만 상속받을 수 있으며, 클래스와 달리 다중상속, 즉 여러 개의 인터페이스로부터 상속을 받는 것이 가능하다.

interface Movable{
    void move(int x,int y)
}
interface Attackable{
    void attack(Unit u);
}

interface Fightable extends Movable , Attackable { }

//이로써 Fightable자체에는 정의된 멤버가 하나도 없지만 조상 인터페이스로부터 상속받은 두 개의 추상메서드 , move(int x,int y) , attack(Unit u)를 멤버로 갖게 된다.

//인터페이스의 구현
//인터페이스도 추상클래스처럼 그 자체로 인스턴스 생성 불가능하기 때문에 추상클래스가 상속을 통해 완성하는 것처럼,인터페이스는 "implements"를 사용할 뿐이다.

class 클래스이름 implements 인터페이스이름{
    //인터페이스의 정의된 추상메서드를 구현해야 한다.
}
class Fighter implements Fightable {
    public void move(int x,int y){ }
    public void attack(Unit u){ }
}
//If 만약 , 구현하는 인터페이스의 메서드 중 일부만 구현한다면 , abstract를 붙여서 추상클래스로 선언해야 한다.

abstract class Fighter implements Fightable {
    public void move(int x,int y)
}

class Fighter extends Unit implements Fightable{    //상속과 구현을 동시에 할 수도 있다.
    public void move(int x,int y){ }
    public void attack(Unit u){ }
}

class FighterTest {
  public static void main(String [] args){
      Fighter f = new fighter();
      
      if(f instacneof Unit)
          System.out.println("f는 Unit클래스의 자손입니다.");
          
      if(f instacneof Fightable)
          System.out.println("f는 Unit클래스의 자손입니다.");
          
      if(f instacneof Movable)
          System.out.println("f는 Unit클래스의 자손입니다.");
      
      if(f instacneof Attackable)
          System.out.println("f는 Unit클래스의 자손입니다.");
      
      if(f instacneof Object)
          System.out.println("f는 Unit클래스의 자손입니다.");
      }
}

class Fighter extends Unit implements Fightable {
    public void move(int x,int y){ }
    public void attack(Unit u){ }
}

class Unit {
    int currentHP:
    int x;
    int y;
}

interface Fightable extends Movable , Attackable {}
interface Movable { void move(int x, int y); }
interface Attackable { void attack(Unit u); }


















  
