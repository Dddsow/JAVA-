//1-1 프로그램 오류
//1.컴파일 에러 2.런타임 에러 3.논리적 에러
//[컴파일 에러]는 컴파일 시 발생하는 에러 [런타임 에러]는 실행시 발생하는 에러 [논리적 에러]는 실행은 되지만,의도와 다르게 동작하는 것
//프로그램 오륜느 두 가지 1.에러 2.예외

//에러는 메모리부족(Out of memory error) 스택오버플로우(stack overflow error)와 같이 발생하면 " 심각한 오류 " 복구X
//예외는 발생하더라도 수습될 수 있는 비교적 덜 심각한 것이다.

//에러가 발생하면 프로그램의 비정상적인 종료를 막을 수 없지만 예외는 발생하더라도 프로그래머가 이에 대한 적절한 코드를 미리 작성해 놓음으로써 프로그램의 비정상적인 종료를 막을 수 있다.

//1-2 예외 클래스의 계층구조
//모든 예외에 최고 조상은 Exception클래스임

//Exception 아래에 자손들이 있고 그 자손들중에 RuntimeException 클래스들이 있다.
//예외를 크게 두 가지로 이렇게 나눌 수 있다.
//RuntimeException은 주로 프로그래머의 실수에 의해서 발생될 수 있는 예외들이다.

//Exception클래스들 : 사용자의 실수와 같은 외적인 요인에 의해 발생하는 예외
//RuntimeException클래스들 : 프로그래머의 실수로 발생하는 예외

//1-3 예외 처리하기 -try-catch문

//예외처리란 프로그램 실행 시 발생할 수 있는 예기치 못한 예외의 발생에 대비한 코드를 작성하는 것이며, 예외처리의 목적은 예외의 발생으로 인한 실행 중인 프로그램의 갑작스런 비정상적 종료를 막음
//예외처리의 정의?
//-> 정의 - 프로그램의 실행 시 발생할 수 있는 예외에 대비한 코드를 작성하는 것
//-> 목적 - 프로그램의 비정상 종료를 막고, 정상적인 실행상태를 유지하는 것

//그렇다면 어떻게 예외를 처리하냐? 지금부터 알아보자
//->예외를 처리하기 위해서는 위에 써놨듯 try-catch문을 사용하며, 그 구조는 다음과 같다

try{
    //예외가 발생할 가능성이 있는 문장들을 넣는다.
}catch(Exception e1){
    //Exception1이 발생했을 경우,이를 처리하기 위한 문장들을 적는다.
}
catch(Exception e2){
    //Exception1이 발생했을 경우,이를 처리하기 위한 문장들을 적는다.
}
catch(Exception eN){
    //Exception1이 발생했을 경우,이를 처리하기 위한 문장들을 적는다.
}

//하나의 try블럭 다음에는 여러 종류의 예외를 처리할 수 있도록 하나 이상의 catch블럭이 올 수 있으며 이 중 예외의 종류와 일치하는 단 한 개의 catch블럭만 수행된다.
//발생한 예외의 종류와 일치하는 catch블럭이 없으면 예외는 처리되지 않는다.

//class ExceptionEx1{
    public static void main(String [] args){
      try{
          try{  } catch(Exception e){ }
      } catch (Exception e) {
          try{  } catch(Exception e){ } //에러. 변수 e가 중복 선언되었다.
      }// try-catch의 끝
      
      try {
      
      } catch (Exception e){
      
      } // try-catch의 끝
    
    }//main메서드의 끝
 
 }
       
 //위의 예제로 우리가 알아야 할 것 -> try블럭또는 catch
 //이처럼 하나의 메서드 내에 여러 개의 try-catch문이 사용될 수 있으며 , try 블럭 또는 catch블럭에 또 다른 try-catch문이 포함 될 수 있다.
 //catch블럭 내에서도 예외가 발생할 수 있기 때문임!
 //catch블럭의 괄호 내에 선언된 변수는 catch블럭 내에서만 유효하기 때문에, 위의 모든 catch블럭에 참조변수 'e'하나 만을 사용해도 된다.
 //그러나catch블럭 내에 또 하나의 try-catch문이 포함된 경우,같은 이름의 참조변수를 사용해서는 안된다.
 //각,catch블럭에 선언된 두 참조변수의 영역이 서로 겹치므로 다른 이름을 사용해야만 서로 구별되기 때문이다.
 //따라서 위의 에제에서 catch블럭 내의 try-catch문에 선언되어 있는 참조변수의 이름을 'e'가 아닌 다른 것으로 바꿔야 한다.
 
class ExceptionEx2{
    public static void main(String [] args){
      int number = 100;
      int result = 0;
      
      for(int i=0;i<10;i++){
          result = number / (int)(Math.random() *  10); //7번째라인
          System.out.println(result);
      }
    }
}
//위의 예제는 변수 number에 저장되어 있는 값을 0-9사이의 임의의 정수로 나눈 결과를 출력하는 일을 10번 반복한다.
//실행하면 'ArithmeticException'이 발생했고, 발생위치는 ExceptionEx2.java:7 로 7번째 라인에서 오류가 난 것을 확인할 수 있다.
//ArithmeticException은 산술연산과정에서 오류가 있을 때 발생하는 예외이며, 정수는 0으로 나누는 것이 금지되어있기 때문에 발생했다. 하지만 실수를 0으로 나누는건 상관X

//이제 예외 구문을 추가해보자.

class ExceptionEx3{
    public static void main(String [] args){
      int number = 100;
      int result = 0;
      
      for(int i=0;i<10;i++){
        try{
          result = number / (int)(Math.random() *  10);
          System.out.println(result);  //try의 안에 문장들을 실행했을때
        }catch(ArithmeticException e){ //예외인경우 ArithmeticException 참조변수 e 가 발생하는 경우 
            System.out.prinln("0"); //이 줄의 소스코드를 출력
        }//try - catch의 끝
      }//for의 끝
  }
}

























