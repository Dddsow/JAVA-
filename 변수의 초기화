//변수의 초기화
//변수를 선언하고 처음으로 값을 저장하는 것을 "변수의 초기화"라고 한다.
// *지역변수는 사용하기 전에 반드시 초기화해야 한다.

class InitTest{
    int x;    //인스턴스 변수
    int y = x; //인스턴스 변수      -> 인스턴스변수는 초기화를 해주지 않아도 자동적으로 int형의 기본값인 0으로 초기화 된다. 역시 x 가 0이기때문에 y또한 0으로 초기화가 된다.
    
    void method1(){
        int i;    //지역변수  -> 지역변수는 메서드 안에있는 변수를 말한다. 
        int j = i; //에러.지역변수를 초기화하지 않고 사용.
    }
}

//각 타입의 기본값
//boolean - false , char - '\u0000' , 참조형 변수 - null , long - 0L 
//변수의 초기화에 대한 예를 몇 가지 더 살펴보자.
//int i = 10, long j = 0; -> 에러: 타입이 다른 변수는 함께 선언하거나 초기화할 수 없다.
//int j = i; int i = 10; -> 에러:변수 i가 선언되기 전에 i를 사용할 수 없다. 

//멤버변수의 초기화 방법
//1. 명시적 초기화
//2. 생성자
//3. 초기화 블럭
//-인스턴스 초기화 블럭 : 인스턴스 변수를 초기화 하는데 사용 -클래스 초기화 블럭 : 클래스변수를 초기화 하는데 사용.

//명시적 초기화
//변수의 선언과 동시에 초기화하는 것을 명시적 초기화라고 한다. 가장 기본적이면서 간단한 초기화 방법이므로 여러 초기화 방법중에 가장 우선적으로 고려해야 한다.

class Car{
    int door = 4;
    Engine e = new Engine();
    
    //...
}

//초기화 블럭
//-인스턴스 초기화 블럭 -클래스 초기화 블럭
//초기화 블럭을 작성하려면, 인스턴스 초기화 블럭은 단순히 클래스 내애 블럭 {}만들고 그 안에 코드를 작성하기만 하면 된다.
//그리고 클래스 초기화 블럭은 그 앞에 static만 붙이면 된다. 어때요 참 쉽죠?
//초기화 블럭 내에서는 메서드와 같이 조건문,반복문,예외처리구문 등을 자유롭게 사용할 수 있으므로, 초기화 작업이 복잡하여 명시적 초기화만으로 부족한 경우 초기화 블럭을 사용한다.

class InitBlock{
    static{ /* 클래스 초기화블럭 입니다. */}
    
    { /* 인스턴스 초기화블럭 입니다. */}
    
    //...
}
//클래스 초기화 블럭은 클래스가 메모리에 처음 로딩될 때 한 번만 수행되며, 인스턴스 초기화 블럭은 생성자와 같이 인스턴스를 생성할 때마다 수행된다.
//그리고 생성자 보다 인스턴스 초기화 블럭이 먼저 수행된다! 
//인스턴스 변수의 초기화는 주로 생성자를 사용하고 , 인스턴스 초기화 블럭은 모든 생성자에서 공통으로 수행돼야 하는 코드를 넣는데 사용된다.

//예제 1
class BlockTest{
    static{
        System.out.println("static { }");
    }
    
    {
        System.out.println(" { } ");
    }
    
    public BlockTest(){
        System.out.println("생성자");
    }
    
    public static void main(String args[]){
        System.out.println("BlockTest bt = new BlockTest(); "); //--->output: 예제가 실행되면서 BlockTest가 로딩될 때 클래스 초기화 블럭이 가장 먼저 수행되어 static{}이 먼저출력
        BlockTest bt = new BlockTest();                         //BlockTest인스턴스가 생성되며 인스턴스 초기화 블럭이 먼저 수행되고, 끝으로 생성자가 수행된다. 
        
        System.out.println("BlockTest bt2 = new BlockTest(); "); 
        BlockTest bt2 = new BlockTest(); //두 번째 BlockTest인스턴스가 생성되며 인스턴스 초기화 블럭이 수행되고 , 생성자가 수행된다.
    }
}

 //예제2
 
 class StaticBlockTest{
    static int [] arr = new int[10];
    
    static {
        for(int i=0;i<arr.length;i++){
            //1과 10사이의 임의의값을 배열 arr에 저장한다.
            arr[i] = (int)(Math.random()*10) + 1;
        }
    }
    
    public static void main(String args[]){
        for(int i= 0; i< arr.length ; i++){
            System.out.println("arr["+i+"] : " + arr[i]);
        }
    }
} //이처럼 배열이나 예외처리가 필요한 초기화에서는 명시적 초기화만으로 복잡한 초기화 작업을 할 수 없다. 이런 경우에 추가적으로 클래스 초기화 블럭을 사용하도록 한다.

//멤버변수의 초기화 시기와 순서

//클래스변수의 초기화시점 :클래스가 처음 로딩될 때 단 한 번 초기화된다.
//인스턴스변수의 초기화시점 :인스턴스가 생성될때마다 각 인스턴스별로 초기화가 이루어진다.

//클래스변수의 초기화순서   기본값 -> 명시적 초기화 -> 클래스 초기화 블럭
//인스턴스변수의 초기화순서 기본값 -> 명시적 초기화 -> 인스턴스 초기화 블럭 -> 생성자

class InitTest{
    static int cv = 1;// 명시적 초기화
    int iv = 1;     //명시적 초기화
    
    static {    cv = 2;  } //클래스 초기화 블럭
    {   iv = 2;  } //인스턴스 초기화 블럭
    InitTest() { //생성자
        iv = 3;
    }
}

//new InitTest();와 같이 하여 인스턴스를 생성했을 때, cv와 iv가 초기화되어가는 과정
//1.cv가 메모리에 생성되고,cv에는 int형의 기본값인 0이 cv에 저장된다.
//2.그 다음에는 명시적 초기화에 의해서 cv에 1이 저장된다.
//3.클래스 초기화 블럭에 의해 cv의 값이 2로 저장된다.
//4.initTest클래스의 인스턴스가 생성되면서 iv가 메모리에 존재하게 된다.
//5.명시적 초기화에 의해서 iv에 1이 저장되고
//6.인스턴스 초기화 블럭이 수행되어 iv에 2가 저장된다
//7.마지막으로 생성자가 수행되어 iv에는 3이 저장된다

class Product{
    static int count = 0; //생성된 인스턴스의 수를 저장하기 위한 변수
    int serialNo; //인스턴스 고유의 번호
    
    {
      ++count;    //Product인스턴스가 생성될 때마다 count의 값ㅂ을 1씩 증가시켜서 serialNo에 저장한다.
      serialNo = count;
    }
    
    public Product() {} //기본생성자, 생략가능
}

class ProductTest{
    public static void main(String args[]){
        Product p1 = new Product();
        Product p2 = new Product();
        Product p3 = new Product();
        
        System.out.println("p1의 제품번호(serial no)는 " + p1.serialNo);
        System.out.println("p2의 제품번호(serial no)는 " + p2.serialNo);
        System.out.println("p3의 제품번호(serial no)는 " + p3.serialNo);
        System.out.println("p4의 제품번호(serial no)는 " + p4.serialNo);
        System.out.println("생성된 제품의 수는 모두 " + Product.count + "개입니다.");
    }
}
// serial No는 Product클래스의 인스턴스를 생성할 때마다 인스턴스 블럭이 수행되어, 클래스변수 count의 값을 1증가시킨 다음, 그 값을 인스턴스변수 serialNo에 저장한다.
// 이렇게 함으로써 새로 생성되는 인스턴스는 이전에 생성된 인스턴스 보다 1이 증가된 serialNo값을 갖게 된다.

class Document{
    static int count = 0;
    String name;
    
    Document(){
        this("제목없음" + ++count );
    }
    
    Document(String name){
        this.name = name;
        System.out.println("문서 " + this.name + "가 생성되었습니다.");
    }
}

class DocumentTest{
    public static void main(String args[]){
        Document d1 = new Document();
        Document d2 = new Document("자바.txt");        
        Document d3 = new Document();       
        Document d4 = new Document();
    }
}
        
        























    
    
    


























    
    
    
    
    
    
    
    
    
    
    
    
