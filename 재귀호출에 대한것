//재귀호출 (recursve call)
//시발 챕터를 묶어서 정리해야겠다. 알아보기가 힘들게 섞이노.
//재귀호출은 반복문보다 메모리랑 시간을 더 잡아먹지만 왜 사용하느냐? -> 논리적 간결함 때문이다~

//예제1 
class FactorialTest{
    public static void main(String [] args){
      int result = factorial(4);
      
      System.out.println(result);
      
    }
    
    static int factorial(int n){
        
        int result = 0;
        
        if( n == 1 ){
            return 1;
        }
        else{
             result = n*factorial(n-1)
             return result;
        }
 }
 
 //예제2 (예제1과 비슷하지만 매개변수의 유효성 검사를 감미한 그런 느낌이랄까요?)
 class FactorialTest2{
  
  static long factorial(int n){
        
        if(n<=0 || n>=20){
            return -1;
        }
        if( n == 1 ){
            return 1;
        }
             result = n*factorial(n-1)
             return result;
  }
   
    public static void main(String [] args){
      int n=21;
      long result = 0;
      
      for(int i=0;i<=n;i++){
          result = factorial(i);
      
          if(result == - 1){
              System.out.printf("유효하지 않은 값입니다.(0<n<20) : %d%n",n);
              break;
          }
          
          System.out.println("%d! = %20d",i,result); 
      }
   }
}
   
//예제3 이제 팩토리얼이 아니라 power 즉 제곱을 더한,, 그런느낌
class powerTest{
    public static void main(String [] args){
      
        int x=2;
        int n=5;
        long result = 0;
        
        for(int i=1;i<=n;i++){
            result += power(x,i);
        }
        
        System.out.println(result);
    }
    
    static int power(int x, int n){
      if(n == 1) return x;
      return x*power(x,n-1);  //예를 들어 x가2이고 n이3이라면 x*power(x,2) -> x*x*power(x,1) -> x*x*x 그리고 for문에서 하나씩 i를 증가시키며 n까지 받기 때문에 x의1승부터n승까지 합.
    }
}
      
      
    
    
    
      
    
    
        
    
   
